name: Docker Optimization CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  Lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Validar Dockerfile (imagem mal otimizada)
        run: |
          echo "🧩 Verificando docker/Dockerfile.bad."
          RESULT=$(docker run --rm -i hadolint/hadolint < docker/Dockerfile.bad || true)
          if [ -z "$RESULT" ]; then
            echo "✅ Nenhum problema encontrado em docker/Dockerfile.bad"
          else
            echo "⚠️ Problemas detectados:"
            echo "$RESULT"
          fi
          echo ""

      - name: Validar Dockerfile (imagem otimizada)
        run: |
          echo "🧩 Verificando docker/Dockerfile.optimized."
          RESULT=$(docker run --rm -i hadolint/hadolint < docker/Dockerfile.optimized || true)
          if [ -z "$RESULT" ]; then
            echo "✅ Nenhum problema encontrado em docker/Dockerfile.optimized"
          else
            echo "⚠️ Problemas detectados:"
            echo "$RESULT"
          fi
          echo ""

  Build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4

      - name: Construir imagem mal otimizada
        run: |
          echo "🔧 Iniciando build da imagem ruim:"
          docker build -t java-bad -f docker/Dockerfile.bad .
          docker save java-bad -o java-bad.tar
          echo "✅ Build concluído da imagem ruim"

      - name: Construir imagem otimizada
        run: |
          echo "⚙️ Iniciando build da imagem otimizada:"
          docker build -t java-optimized -f docker/Dockerfile.optimized .
          docker save java-optimized -o java-optimized.tar
          echo "✅ Build concluído da imagem otimizada"

      - name: Publicar imagens como artefatos
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            java-bad.tar
            java-optimized.tar

  Security:
    name: Security Scan 
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Baixar imagens geradas
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Recarregar imagens Docker
        run: |
          docker load -i java-bad.tar
          docker load -i java-optimized.tar

      - name: Instalar dependências (jq e Trivy)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          echo "Instalando Trivy."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Executar varredura com Trivy
        run: |
          echo "Iniciando varredura da imagem ruim."
          trivy image --quiet --format json --output trivy-bad.json java-bad || true

          echo "Iniciando varredura da imagem otimizada."
          trivy image --quiet --format json --output trivy-optimized.json java-optimized || true

          echo "Varredura concluída."

      - name: Extrair contagem de vulnerabilidades
        run: |
          BAD_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add' trivy-bad.json)
          OPT_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add' trivy-optimized.json)
          echo "BAD_VULNS=${BAD_VULNS:-0}" >> $GITHUB_ENV
          echo "OPT_VULNS=${OPT_VULNS:-0}" >> $GITHUB_ENV
          echo "Resumo das vulnerabilidades:"
          echo "  - Imagem ruim: ${BAD_VULNS:-0}"
          echo "  - Imagem otimizada: ${OPT_VULNS:-0}"

      - name: Publicar relatórios do Trivy
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-bad.json
            trivy-optimized.json

  Report:
    name: Compare & Generate Report
    runs-on: ubuntu-latest
    needs: [Build, Security]
    steps:
      - name: Baixar artefatos das imagens
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Recarregar imagens Docker
        run: |
          echo "📦 Carregando imagens salvas"
          docker load -i java-bad.tar
          docker load -i java-optimized.tar

      - name: Comparar tamanhos das imagens
        run: |
          BAD_SIZE=$(docker images java-bad --format "{{.Size}}" | sed 's/MB//')
          OPT_SIZE=$(docker images java-optimized --format "{{.Size}}" | sed 's/MB//')
          GAIN=$(echo "scale=2; (1 - $OPT_SIZE / $BAD_SIZE) * 100" | bc)
          echo "BAD_SIZE=${BAD_SIZE}" >> $GITHUB_ENV
          echo "OPT_SIZE=${OPT_SIZE}" >> $GITHUB_ENV
          echo "GAIN_PERCENT=${GAIN}" >> $GITHUB_ENV

      - name: Baixar resultados do Trivy
        uses: actions/download-artifact@v4
        with:
          name: trivy-scan-results

      - name: Extrair vulnerabilidades do Trivy
        run: |
          BAD_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add' trivy-bad.json)
          OPT_VULNS=$(jq '[.Results[].Vulnerabilities | length] | add' trivy-optimized.json)
          echo "BAD_VULNS=${BAD_VULNS}" >> $GITHUB_ENV
          echo "OPT_VULNS=${OPT_VULNS}" >> $GITHUB_ENV

      - name: Gerar relatório final
        run: |
          echo "## 🐳 Relatório de Otimização e Segurança" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Imagem | Tamanho | Vulnerabilidades |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Ruim | ${BAD_SIZE}MB | ${BAD_VULNS} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Otimizada | ${OPT_SIZE}MB | ${OPT_VULNS} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📉 **Redução de tamanho:** ${GAIN_PERCENT}% 🔥" >> $GITHUB_STEP_SUMMARY
          echo "🔒 **Redução de vulnerabilidades:** $((BAD_VULNS - OPT_VULNS)) vulnerabilidades a menos ✅" >> $GITHUB_STEP_SUMMARY
